{"version":3,"sources":["calculator.jsx","display.jsx","App.js","serviceWorker.js","index.js"],"names":["Calculator","useState","count","setCount","sum","setSum","handleClickOfNumber","event","target","value","handleClickOfDecimal","test","console","log","handleClickOfOperations","replace","handleClickOfSum","eval","handleClickOfClear","className","id","onClick","Display","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.723bfa4e.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport  Display from './display'\r\nimport './calculator.css';\r\n\r\nconst Calculator = () => {\r\n  const [count, setCount] = useState('');\r\n  const [sum, setSum] = useState('');\r\n\r\n  const handleClickOfNumber = (event)  => {\r\n    if ((count + event.target.value) === '0') {\r\n      setCount('')\r\n    } else if (event.target.value === '0' && sum) {\r\n      setCount('')\r\n      setSum('')\r\n    } else if (sum) {\r\n        setCount(event.target.value)\r\n        setSum('') \r\n    } else {\r\n        setCount(count + event.target.value)\r\n    }\r\n  }\r\n\r\n  const handleClickOfDecimal = (event)  => {\r\n    if ((/[.]/.test(count) && !(/[*]+|[+]+|[-]+|[/]+/.test(count)))) {\r\n      console.log('Invalid character')\r\n    } else if (/[.]$/.test(count)) {\r\n        console.log('Invalid character')\r\n    } else {\r\n      setCount(count + event.target.value)\r\n    }\r\n  }\r\n\r\n  const handleClickOfOperations = (event)  => {\r\n    if (/[*]$|[+]$|[-]$|[/]$/.test(count) && /[*]$|[+]$|[/]$/.test(event.target.value)) {\r\n      setCount(count.replace(/[*]$|[+]$|[-]$|[/]$/, event.target.value))\r\n    } else if ((count === '' && (event.target.value === '*' || event.target.value === '/')) || (/[-]$/.test(count) && event.target.value === '-')) {\r\n        console.log('Invalid character');\r\n    } else if (sum) {\r\n      setCount(sum + event.target.value)\r\n      setSum('')\r\n    } else {\r\n      setCount(count + event.target.value)\r\n    }\r\n  }\r\n  \r\n  const handleClickOfSum = ()  => {\r\n    if (/[*]$|[+]$|[-]$|[/]$/.test(count) || /^[*]|^[/]/.test(count) ) {\r\n      console.log('Invalid character')\r\n    } else {\r\n      setSum(eval(count))\r\n    }\r\n  }\r\n\r\n  const handleClickOfClear = ()  => {\r\n    setCount('')\r\n    setSum('')\r\n  }\r\n\r\n  return (\r\n    <div className=\"Calculator\">\r\n      <div className='calculatorBody'>\r\n        <Display count={count} sum={sum} />\r\n        <button id=\"clear\" className='operation' value={'0'} onClick={handleClickOfClear} >clear</button> \r\n        <button id=\"zero\" value={'0'} onClick={handleClickOfNumber} >0</button>\r\n        <button id=\"divide\" className='operation' value={'/'} onClick={handleClickOfOperations} >/</button>\r\n        <button id=\"multiply\" className='operation' value={'*'} onClick={handleClickOfOperations} >&#10005;</button>\r\n        <button id=\"one\" value={'1'} onClick={handleClickOfNumber} >1</button>\r\n        <button id=\"two\" value={'2'} onClick={handleClickOfNumber} >2</button>\r\n        <button id=\"three\" value={'3'} onClick={handleClickOfNumber} >3</button>\r\n        <button id=\"add\" className='operation' value={'+'} onClick={handleClickOfOperations} >+</button>\r\n        <button id=\"four\" value={'4'} onClick={handleClickOfNumber} >4</button>\r\n        <button id=\"five\" value={'5'} onClick={handleClickOfNumber} >5</button>\r\n        <button id=\"six\" value={'6'} onClick={handleClickOfNumber} >6</button>\r\n        <button id=\"subtract\" className='operation' value={'-'} onClick={handleClickOfOperations} >-</button>\r\n        <button id=\"seven\" value={'7'} onClick={handleClickOfNumber} >7</button>\r\n        <button id=\"eight\" value={'8'} onClick={handleClickOfNumber} >8</button>\r\n        <button id=\"nine\" value={'9'} onClick={handleClickOfNumber} >9</button>\r\n        <button id=\"equals\" className='operation' value={\"=\"} onClick={handleClickOfSum} >=</button>\r\n        <button id=\"decimal\" value={'.'} onClick={handleClickOfDecimal} >.</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default Calculator;","import React from 'react';\r\n\r\nimport './display.css';\r\n\r\nfunction Display({ count, sum }) { \r\nreturn <div id='displayNumbers'>\r\n    <div id='displayCount'>{count ? count : '0'}</div>\r\n    <div id='displaySum'>{sum}</div>\r\n  </div>\r\n};\r\n\r\nexport default Display;","import React from 'react';\nimport './App.css';\nimport Calculator from './calculator'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}