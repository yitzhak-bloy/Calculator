{"version":3,"sources":["calculator.jsx","display.jsx","App.js","serviceWorker.js","index.js"],"names":["Calculator","props","handleClick","event","state","count","target","value","setState","sum","handleClickOfOperations","test","replace","console","log","handleSum","eval","handleDecimal","handleclear","className","this","id","onClick","Component","Display","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f03d02f2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport  Display from './display'\r\nimport './calculator.css';\r\n\r\n  class Calculator extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        count: '',\r\n        sum: ''\r\n      };\r\n    }\r\n\r\n  handleClick = (event)  => {\r\n    if ((this.state.count + event.target.value) === '0') {\r\n      this.setState({\r\n        count: ''\r\n      })\r\n    } else if (this.state.sum) {\r\n      this.setState({\r\n        count: event.target.value,\r\n        sum: ''\r\n      })\r\n    } else {\r\n      this.setState({\r\n        count: this.state.count + event.target.value\r\n      })\r\n    }\r\n  }\r\n\r\n  handleClickOfOperations = (event)  => {\r\n    if (/[*]$|[+]$|[-]$|[/]$/.test(this.state.count) && /[*]$|[+]$|[/]$/.test(event.target.value)) {\r\n      this.setState({\r\n        count: this.state.count.replace(/[*]$|[+]$|[-]$|[/]$/, event.target.value)\r\n      })\r\n    } else if ( this.state.count === '' && (event.target.value === '*' || event.target.value === '/')) {\r\n        console.log('לא חוקי');\r\n    } else if (this.state.sum) {\r\n        this.setState({\r\n          count: this.state.sum + event.target.value,\r\n          sum: ''\r\n        })\r\n    } else {\r\n      this.setState({\r\n        count: this.state.count + event.target.value\r\n      })\r\n    }\r\n  }\r\n  \r\n  handleSum = ()  => {\r\n    if (/[*]$|[+]$|[-]$|[/]$/.test(this.state.count) || /^[*]|^[/]/.test(this.state.count) ) {\r\n      console.log('לא חוקי')\r\n    } else {\r\n      this.setState({\r\n        sum: eval(this.state.count)\r\n      })\r\n    }\r\n  }\r\n\r\n  handleDecimal = (event)  => {\r\n    if ((/[.]/.test(this.state.count) && !(/[*]+|[+]+|[-]+|[/]+/.test(this.state.count)))) {\r\n      console.log('לא חוקי')\r\n    } else {\r\n      this.setState({\r\n        count: this.state.count + event.target.value\r\n      })\r\n    }\r\n  }\r\n\r\n  handleclear = ()  => {\r\n    this.setState({\r\n      count: '',\r\n      sum: ''\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Calculator\">\r\n        <div className='calculatorBody'>\r\n          <Display count={this.state.count} sum={this.state.sum} />\r\n          <button id=\"clear\" className='operation' value={'0'} onClick={this.handleclear} >clear</button> \r\n          <button id=\"zero\" value={'0'} onClick={this.handleClick} >0</button>\r\n          <button id=\"divide\" className='operation' value={'/'} onClick={this.handleClickOfOperations} >/</button>\r\n          <button id=\"multiply\" className='operation' value={'*'} onClick={this.handleClickOfOperations} >&#10005;</button>\r\n          <button id=\"one\" value={'1'} onClick={this.handleClick} >1</button>\r\n          <button id=\"two\" value={'2'} onClick={this.handleClick} >2</button>\r\n          <button id=\"three\" value={'3'} onClick={this.handleClick} >3</button>\r\n          <button id=\"add\" className='operation' value={'+'} onClick={this.handleClickOfOperations} >+</button>\r\n          <button id=\"four\" value={'4'} onClick={this.handleClick} >4</button>\r\n          <button id=\"five\" value={'5'} onClick={this.handleClick} >5</button>\r\n          <button id=\"six\" value={'6'} onClick={this.handleClick} >6</button>\r\n          <button id=\"subtract\" className='operation' value={'-'} onClick={this.handleClickOfOperations} >-</button>\r\n          <button id=\"seven\" value={'7'} onClick={this.handleClick} >7</button>\r\n          <button id=\"eight\" value={'8'} onClick={this.handleClick} >8</button>\r\n          <button id=\"nine\" value={'9'} onClick={this.handleClick} >9</button>\r\n          <button id=\"equals\" className='operation' value={'='} onClick={this.handleSum} >=</button>\r\n          <button id=\"decimal\" value={'.'} onClick={this.handleDecimal } >.</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n  \r\nexport default Calculator;","import React from 'react';\r\n\r\nimport './display.css';\r\n\r\nconst Display = ({count, sum}) => (\r\n  <div id='display'>\r\n    <div id='displayCount'>{count ? count : '0'}</div>\r\n    <div id='displaySum'>{sum}</div>\r\n  </div>\r\n);\r\n\r\nexport default Display;","import React from 'react';\nimport './App.css';\nimport Calculator from './calculator'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}